/*

 JavaScript analysis tools for JSParsec

 Version: 0.0.1

 http://code.google.com/p/jsparsec/

 Copyright (c) 2010 Balazs Endresz (balazs.endresz@gmail.com)
 Dual licensed under the MIT and GPL licenses.

 This is a port of the WebBits library (BrownPLT.JavaScript.*):
 http://hackage.haskell.org/package/WebBits-2.0
 Copyright (c) 2007-2009 Arjun Guha, Claudiu Saftoiu, and Spiridon Eliopoulos

*/
var ns=[];for(var name in JSParsec)ns.push(name);ns=JSParsec.map(function(a){return"var "+a+" = JSParsec."+a},ns).join(";");eval(ns);function Statement(){}function JavaScript(){}data(JavaScript,[["Script","a",Array]]);function Id(){}data(Id,[["Id","a",String]]);function unId(a){if(!(a instanceof Id))throw"Type error: expecting type of 'Id' instead of "+a.constructor;return a.Id?a[1]:null}function InfixOp(){}
data(InfixOp,["OpLT","OpLEq","OpGT","OpGEq ","OpIn ","OpInstanceof","OpEq","OpNEq","OpStrictEq","OpStrictNEq","OpLAnd","OpLOr","OpMul","OpDiv","OpMod ","OpSub","OpLShift","OpSpRShift","OpZfRShift","OpBAnd","OpBXor","OpBOr","OpAdd"]);function AssignOp(){}data(AssignOp,["OpAssign","OpAssignAdd","OpAssignSub","OpAssignMul","OpAssignDiv","OpAssignMod","OpAssignLShift","OpAssignSpRShift","OpAssignZfRShift","OpAssignBAnd","OpAssignBXor","OpAssignBOr"]);function UnaryAssignOp(){}
data(UnaryAssignOp,["PrefixInc","PrefixDec","PostfixInc","PostfixDec"]);function PrefixOp(){}data(PrefixOp,["PrefixLNot","PrefixBNot","PrefixPlus","PrefixMinus","PrefixTypeof","PrefixVoid","PrefixDelete"]);function Prop(){}data(Prop,[["PropId","a",Id],["PropString","a",String],["PropNum","a",Number]]);function LValue(){}function Expression(){}data(LValue,[["LVar","a",String],["LDot","a",Expression,String],["LBracket","a",Expression,Expression]]);
data(Expression,[["StringLit","a",String],["RegexpLit","a",String,Boolean,Boolean],["NumLit","a",Number],["IntLit","a",Number],["BoolLit","a",Boolean],["NullLit","a"],["ArrayLit","a",Array],["ObjectLit","a",Array],["ThisRef","a"],["VarRef","a",Id],["DotRef","a",Expression,Id],["BracketRef","a",Expression,Expression],["NewExpr","a",Expression,Array],["PrefixExpr","a",PrefixOp,Expression],["UnaryAssignExpr","a",UnaryAssignOp,LValue],["InfixExpr","a",InfixOp,Expression,Expression],["CondExpr","a",Expression,
Expression,Expression],["AssignExpr","a",AssignOp,LValue,Expression],["ParenExpr","a",Expression],["ListExpr","a",Array],["CallExpr","a",Expression,Expression],["FuncExpr","a",Maybe,Array,Statement]]);function CaseClause(){}data(CaseClause,[["CaseClause","a",Expression,Array],["CaseDefault","a",Array]]);function CatchClause(){}data(CatchClause,[["CatchClause","a",Id,Statement]]);function VarDecl(){}data(VarDecl,[["VarDecl","a",Id,Maybe]]);function ForInit(){}
data(ForInit,["NoInit",["VarInit",Array],["ExprInit",Expression]]);function ForInInit(){}data(ForInInit,[["ForInVar",Id],["ForInNoVar",Id]]);
data(Statement,[,["BlockStmt","a",Array],["EmptyStmt","a"],["ExprStmt","a",Expression],["IfStmt","a",Expression,Statement,Statement],["IfSingleStmt","a",Expression,Statement],["SwitchStmt","a",Expression,Array],["WhileStmt","a",Expression,Statement],["DoWhileStmt","a",Statement,Expression],["BreakStmt","a",Maybe],["ContinueStmt","a",Maybe],["LabelledStmt","a",Id,Statement],["ForInStmt","a",ForInInit,Expression,Statement],["ForStmt","a",ForInit,Maybe,Maybe,Statement],["TryStmt","a",Statement,Array,
Maybe],["ThrowStmt","a",Expression],["ReturnStmt","a",Maybe],["WithStmt","a",Expression,Statement],["VarDeclStmt","a",Array],["FunctionStmt","a",Id,Array,Statement]]);
var identifierStart=[letter,"<|>",oneOf,"$_"].resolve(),javascriptDef=GenLanguageDef.LanguageDef(record,{commentStart:"/*",commentEnd:"*/",commentLine:"//",nestedComments:false,identStart:identifierStart,identLetter:[alphaNum,"<|>",oneOf,"$_"].resolve(),opStart:oneOf("{}<>()~.,?:|&^=!+-*/%!"),opLetter:oneOf("=<>|&+"),reservedOpNames:["break","case","catch","const","continue","debugger","default","delete","do","else","enum","false","finally","for","function","if","instanceof","in","let","new","null",
"return","switch","this","throw","true","try","typeof","var","void","while","with"],reservedNames:["|=","^=","&=","<<=",">>=",">>>=","+=","-=","*=","/=","%=","=",";",",","?",":","||","&&","|","^","&","===","==","=","!==","!=","<<","<=","<",">>>",">>",">=",">","++","--","+","-","*","/","%","!","~",".","[","]","{","}","(",")","</","instanceof"],caseSensitive:true}),lex=makeTokenParser(javascriptDef),cfhrh=id,error=id;function readHex(a){return parseInt(a.join?a.join(""):a,16)}
var round=Math.round,getPosition=getParserState;function sourceLine(a,b){return b.input.substring(0,a).match(/(\r\n)|(\n\r)|\r|\n/g).length}
var identifier=liftM2(Id.Id,getPosition,lex.identifier),parseIfStmt=cs("pos","<-",getPosition)(lex.reserved,"if")("test","<-",parseParenExpr,"<?>","parenthesized test-expression in if statement")("consequent","<-",parseStatement,"<?>","true-branch of if statement")(optional,lex.semi)(cs(lex.reserved,"else")("alternate","<-",parseStatement)(ret,function(a){return Statement.IfStmt(a.scope.pos,a.scope.test,a.scope.consequent,a.alternate)}),"<|>",returnCall(Statement.IfSingleStmt,"pos","test","consequent")),
_parseDefault=cs("pos","<-",getPosition)(lex.reserved,"default")(lex.colon)("statements","<-",many,parseStatement)(returnCall,CaseClause.CaseDefault,"pos","statements"),_parseCase=cs("pos","<-",getPosition)(lex.reserved,"case")("condition","<-",parseListExpr)(lex.colon)("actions","<-",many,parseStatement)(returnCall,CaseClause.CaseClause,"pos","condition","actions"),parseSwitchStmt=cs("pos","<-",getPosition)(lex.reserved,"switch")("test","<-",parseParenExpr)("clauses","<-",lex.braces,"$",many,"$",
_parseDefault,"<|>",_parseCase)(returnCall,Statement.SwitchStmt,"pos","test","clauses"),parseWhileStmt=cs("pos","<-",getPosition)(lex.reserved,"while")("test","<-",parseParenExpr,"<?>","parenthesized test-expression in while loop")("body","<-",parseStatement)(returnCall,Statement.WhileStmt,"pos","test","body"),parseDoWhileStmt=cs("pos","<-",getPosition)(lex.reserved,"do")("body","<-",parseBlockStmt)(lex.reserved,"while","<?>","while at the end of a do block")("test","<-",parseParenExpr,"<?>","parenthesized test-expression in do loop")(optional,
lex.semi)(returnCall,Statement.DoWhileStmt,"pos","body","test"),parseContinueStmt=cs("pos","<-",getPosition)(lex.reserved,"continue")("pos_","<-",getPosition)("id","<-",function(a,b,c){return(sourceLine(b.pos,a)==sourceLine(b.pos_,a)?parserPlus(liftM(Maybe.Just,identifier),return_(Maybe.Nothing)):return_(Maybe.Nothing))(a,b,c)})(returnCall,Statement.ContinueStmt,"pos","id"),parseBreakStmt=cs("pos","<-",getPosition)(lex.reserved,"break")("pos_","<-",getPosition)("id","<-",function(a,b,c){return(sourceLine(b.pos,
a)==sourceLine(b.pos_,a)?parserPlus(liftM(Maybe.Just,identifier),return_(Maybe.Nothing)):return_(Maybe.Nothing))(a,b,c)})(optional,lex.semi)(returnCall,Statement.BreakStmt,"pos","id"),parseBlockStmt=cs("pos","<-",getPosition)("statements","<-",lex.braces,[many,parseStatement])(returnCall,Statement.BlockStmt,"pos","statements"),parseEmptyStmt=cs("pos","<-",getPosition)(lex.semi)(returnCall,Statement.EmptyStmt,"pos"),parseLabelledStmt=cs("pos","<-",getPosition)("label","<-",try_,cs("label","<-",identifier)(lex.colon)(ret,
"label"))("statement","<-",parseStatement)(returnCall,Statement.LabelledStmt,"pos","label","statement"),parseExpressionStmt=cs("pos","<-",getPosition)("expr","<-",parseListExpr)(optional,lex.semi)(returnCall,Statement.ExprStmt,"pos","expr"),_parseInit=ex([lex.reserved,"var",">>",liftM,ForInInit.ForInVar,identifier],"<|>",[liftM,ForInInit.ForInNoVar,identifier]),parseForInStmt=cs("pos","<-",getPosition)("init_expr","<-",try_,cs(lex.reserved,"for")(lex.parens,cs("init","<-",_parseInit)(lex.reserved,
"in")("expr","<-",parseExpression)(ret,function(a){return[a.init,a.expr]})))("body","<-",parseStatement)(ret,function(a){return Statement.ForInStmt(a.pos,a.init_expr[0],a.init_expr[1],a.body)}),_parseInit2=ex([lex.reserved,"var",">>",liftM,ForInit.VarInit,[parseVarDecl,op(sepBy),lex.comma]],"<|>",[liftM,ForInit.ExprInit,parseListExpr],"<|>",return_(ForInit.NoInit)),parseForStmt=cs("pos","<-",getPosition)(lex.reserved,"for")(lex.reservedOp("("))("init","<-",_parseInit2)(lex.semi)("test","<-",[liftM,
Maybe.Just,parseExpression],"<|>",return_(Maybe.Nothing))(lex.semi)("iter","<-",[liftM,Maybe.Just,parseListExpr],"<|>",return_(Maybe.Nothing))(lex.reservedOp(")"),"<?>","closing paren")("stmt","<-",parseStatement)(returnCall,Statement.ForStmt,"pos","init","test","iter","stmt"),_parseCatchClause=cs("pos","<-",getPosition)(lex.reserved,"catch")("id","<-",lex.parens,identifier)("stmt","<-",parseStatement)(returnCall,CatchClause.CatchClause,"pos","id","stmt"),parseTryStmt=cs(lex.reserved,"try")("pos",
"<-",getPosition)("guarded","<-",parseStatement)("catches","<-",many,_parseCatchClause)("finally","<-",[lex.reserved,"finally",">>",liftM,Maybe.Just,parseStatement],"<|>",return_(Maybe.Nothing))(returnCall,Statement.TryStmt,"pos","guarded","catches","finally"),parseThrowStmt=cs("pos","<-",getPosition)(lex.reserved,"throw")("expr","<-",parseExpression)(optional,lex.semi)(returnCall,Statement.ThrowStmt,"pos","expr"),parseReturnStmt=cs("pos","<-",getPosition)(lex.reserved,"return")("expr","<-",[liftM,
Maybe.Just,parseListExpr],"<|>",return_(Maybe.Nothing))(optional,lex.semi)(returnCall,Statement.ReturnStmt,"pos","expr"),parseWithStmt=cs("pos","<-",getPosition)(lex.reserved,"with")("context","<-",parseParenExpr)("stmt","<-",parseStatement)(returnCall,Statement.WithStmt,"pos","context","stmt"),parseVarDecl=cs("pos","<-",getPosition)("id","<-",identifier)("init","<-",[lex.reservedOp("="),">>",liftM,Maybe.Just,parseExpression],"<|>",return_(Maybe.Nothing))(returnCall,VarDecl.VarDecl,"pos","id","init"),
parseVarDeclStmt=cs("pos","<-",getPosition)(lex.reserved,"var")("decls","<-",parseVarDecl,op(sepBy),lex.comma)(optional,lex.semi)(returnCall,Statement.VarDeclStmt,"pos","decls"),parseFunctionStmt=cs("pos","<-",getPosition)("name","<-",try_,[lex.reserved,"function",">>",identifier])("args","<-",lex.parens,[identifier,op(sepBy),lex.comma])("body","<-",parseBlockStmt,"<?>","function body in { ... }")(returnCall,Statement.FunctionStmt,"pos","name","args","body"),parseStatement=ex(parseIfStmt,"<|>",parseSwitchStmt,
"<|>",parseWhileStmt,"<|>",parseDoWhileStmt,"<|>",parseContinueStmt,"<|>",parseBreakStmt,"<|>",parseBlockStmt,"<|>",parseEmptyStmt,"<|>",parseForInStmt,"<|>",parseForStmt,"<|>",parseTryStmt,"<|>",parseThrowStmt,"<|>",parseReturnStmt,"<|>",parseWithStmt,"<|>",parseVarDeclStmt,"<|>",parseFunctionStmt,"<|>",parseLabelledStmt,"<|>",parseExpressionStmt,"<?>","statement"),parseThisRef=cs("pos","<-",getPosition)(lex.reserved,"this")(returnCall,Expression.ThisRef,"pos"),parseNullLit=cs("pos","<-",getPosition)(lex.reserved,
"null")(returnCall,Expression.NullLit,"pos"),parseBoolLit=cs("pos","<-",getPosition)("true","<-",return_,true)("false","<-",return_,false)([lex.reserved,"true",">>",returnCall(Expression.BoolLit,"pos","true")],"<|>",[lex.reserved,"false",">>",returnCall(Expression.BoolLit,"pos","false")]),parseVarRef=liftM2(Expression.VarRef,getPosition,identifier),parseArrayLit=liftM2(Expression.ArrayLit,getPosition,lex.squares(sepEndBy(parseExpression,lex.comma))),parseFuncExpr=cs("pos","<-",getPosition)(lex.reserved,
"function")("name","<-",[identifier,">>=",compose1(return_,Maybe.Just)],"<|>",return_,Maybe.Nothing)("args","<-",lex.parens,[identifier,op(sepBy),lex.comma])("body","<-",parseBlockStmt)(returnCall,Expression.FuncExpr,"pos","name","args","body"),escapeChars=[["'","'"],['"','"'],["\\","\\"],["b","\u0008"],["f","\u000c"],["n","\n"],["r","\r"],["t","\t"],["v","\u000b"],["/","/"],[" "," "],["0","\u0000"]],allEscapes=map(fst,escapeChars),parseEscapeChar=cs("c","<-",oneOf(allEscapes))(ret,function(a){return lookup(a.c,
escapeChars)[0]}),parseAsciiHexChar=cs(char_,"x")("d1","<-",hexDigit)("d2","<-",hexDigit)(ret,function(a){return cfhrh(a.d1+a.d2+"")}),parseUnicodeHexChar=cs(char_("u"))(liftM,cfhrh,sequence([hexDigit,hexDigit,hexDigit,hexDigit]));function isWhitespace(a){return a==" "||a=="\t"}function lazyParseStringLit_(a){return function(b,c,d){return parseStringLit_(a)(b,c,d)}}
function parseStringLit_(a){return[[char_(a),">>",return_,""],"<|>",[cs(try_(string,"\\'"))("cs","<-",lazyParseStringLit_(a))(ret,function(b){return"'"+b.cs})],"<|>",[cs(char_("\\"))("c","<-",parseEscapeChar,"<|>",parseAsciiHexChar,"<|>",parseUnicodeHexChar,"<|>",char_("\r"),"<|>",char_("\n"))("cs","<-",lazyParseStringLit_(a))(ret,function(b){return b.c=="\r"||b.c=="\n"?cons(b.c,dropWhile(isWhitespace,b.cs)):cons(b.c,b.cs)})],"<|>",[liftM2,cons,anyChar,lazyParseStringLit_(a)]].resolve()}
var parseStringLit=cs("pos","<-",getPosition)("str","<-",lex.lexeme,"$",[char_("'"),">>=",parseStringLit_],"<|>",[char_('"'),">>=",parseStringLit_])(returnCall,Expression.StringLit,"pos","str"),parseFlags=cs("flags","<-",many,oneOf("mgi"))(ret,function(a){return function(b){return b(elem("g",a.flags),elem("i",a.flags))}}),parseEscape=[char_("\\"),">>",anyChar].resolve(),parseChar=noneOf("/"),parseRe=ex([char_("/"),">>",return_,""],"<|>",cs(char_("\\"))("ch","<-",anyChar)("rest","<-",parseRe)(ret,
function(a){return"\\"+a.ch+a.rest}),"<|>",[liftM2,cons,anyChar,parseRe]),parseRegexpLit=cs("pos","<-",getPosition)(char_("/"))("pat","<-",parseRe)("flags","<-",parseFlags)(spaces)(ret,function(a){return a.flags(Expression.RegexpLit(a.pos,a.pat))}),_parseProp=cs("name","<-",[liftM,uncurry(Prop.PropString),[liftM,function(a){return[a[0],a[1]]},parseStringLit]],"<|>",[liftM2,Prop.PropId,getPosition,identifier],"<|>",[liftM2,Prop.PropNum,getPosition,lex.decimal])(lex.colon)("val","<-",assignExpr)(ret,
function(a){return[a.name,a.val]}),parseObjectLit=cs("pos","<-",getPosition)("props","<-",lex.braces,[_parseProp,op(sepEndBy),lex.comma],"<?>","object literal")(returnCall,Expression.ObjectLit,"pos","props"),hexLit=cs(try_,string("0x"))("digits","<-",many1,oneOf("0123456789abcdefABCDEF"))("hex","<-",returnCall,readHex,"digits")(ret,function(a){return[true,a.hex]});function mkDecimal(a,b,c){return b>=1?mkDecimal(a,b/10,c):(a+b)*Math.pow(10,c)}
var exponentPart=cs(oneOf,"eE")([char_("+"),">>",lex.decimal],"<|>",[char_("-"),">>",negate,op(fmap),lex.decimal],"<|>",lex.decimal);function jparser(a){return ex(a,">>=",[return_,".",Maybe.Just])}
var decLit=ex(cs("whole","<-",lex.decimal)("mfrac","<-",option,Maybe.Nothing,[jparser,[char_("."),">>",lex.decimal]])("mexp","<-",option,Maybe.Nothing,[jparser,exponentPart])(ret,function(a){return a.mfrac==Maybe.Nothing&&a.mexp==Maybe.Nothing?[true,fromIntegral(a.whole)]:[false,mkDecimal(fromIntegral(a.whole),fromIntegral(maybe(0,id,a.mfrac)),fromIntegral(maybe(0,id,a.mexp)))]}),"<|>",cs("frac","<-",char_("."),">>",lex.decimal)("exp","<-",option,0,exponentPart)(ret,function(a){return[false,mkDecimal(0,
fromIntegral(a.frac),fromIntegral(a.exp))]})),parseNumLit=cs("pos","<-",getPosition)("isint_num","<-",lex.lexeme,"$",hexLit,"<|>",decLit)(notFollowedBy,identifierStart,"<?>","whitespace")(ret,function(a){var b=a.isint_num[1];return a.isint_num[0]?Expression.IntLit(a.pos,round(b)):Expression.NumLit(a.pos,b)});function withPos(a,b){return do_(bind("pos",getPosition),bind("e",b),ret(function(c){return a(c.pos,c.e)}))}
function dotRef(a){function b(c,d){return Expression.DotRef(c,a,d)}return ex([lex.reservedOp("."),">>",withPos,b,identifier],"<?>","property.ref")}function funcApp(a){function b(c,d,f){return Expression.CallExpr(c,a,f)}return ex([lex.parens,"$",withPos,b,[parseExpression,op(sepBy),lex.comma]],"<?>","(function application)")}function bracketRef(a){function b(c,d){return Expression.BracketRef(c,a,d)}return ex([lex.brackets,"$",withPos,b,parseExpression],"<?>","[property-ref]")}
var parseParenExpr=withPos(Expression.ParenExpr,lex.parens(parseListExpr)),parseExprForNew=ex(parseThisRef,"<|>",parseNullLit,"<|>",parseBoolLit,"<|>",parseStringLit,"<|>",parseArrayLit,"<|>",parseParenExpr,"<|>",parseNewExpr,"<|>",parseNumLit,"<|>",parseRegexpLit,"<|>",parseObjectLit,"<|>",parseVarRef),parseSimpleExpr_=ex(parseThisRef,"<|>",parseNullLit,"<|>",parseBoolLit,"<|>",parseStringLit,"<|>",parseArrayLit,"<|>",parseParenExpr,"<|>",parseFuncExpr,"<|>",parseNumLit,"<|>",parseRegexpLit,"<|>",
parseObjectLit,"<|>",parseVarRef);function parseSimpleExprForNew(a){if(a.Just){a=a[0];return cs("e_","<-",dotRef,a,"<|>",bracketRef,a)(function(b,c,d){return parseSimpleExprForNew(Maybe.Just(c.e_))(b,c,d)},"<|>",return_,a)}if(a.Nothing)return cs("e","<-",parseNewExpr,"<?>","expression (3)")(function(b,c,d){return parseSimpleExprForNew(Maybe.Just(c.e))(b,c,d)})}
var parseNewExpr=ex(cs("pos","<-",getPosition)(lex.reserved,"new")("constructor_","<-",parseSimpleExprForNew,Maybe.Nothing)("arguments","<-",[try_,[lex.parens,[parseExpression,op(sepBy),lex.comma]]],"<|>",return_([]))(returnCall,Expression.NewExpr,"pos","constructor_","arguments"),"<|>",parseSimpleExpr_);
function parseSimpleExpr(a){if(a.Just){a=a[0];return cs("e_","<-",dotRef,a,"<|>",funcApp,a,"<|>",bracketRef,a)(function(b,c,d){return parseSimpleExpr(Maybe.Just(c.e_))(b,c,d)},"<|>",return_,a)}if(a.Nothing)return cs("e","<-",parseNewExpr,"<?>","expression (3)")(function(b,c,d){return parseSimpleExpr(Maybe.Just(c.e))(b,c,d)})}function makeInfixExpr(a,b){a=cs("pos","<-",getPosition)(lex.reservedOp(a))(ret,function(c){return Expression.InfixExpr(c.pos,b)});return Operator.Infix(a,Assoc.AssocLeft)}
var parsePrefixedExpr=cs("pos","<-",getPosition)("op","<-",optionMaybe,"$",[lex.reservedOp("!"),">>",return_,PrefixOp.PrefixLNot],"<|>",[lex.reservedOp("~"),">>",return_,PrefixOp.PrefixBNot],"<|>",[try_,[lex.lexeme,"$",char_("-"),">>",notFollowedBy,char_("-")],">>",return_,PrefixOp.PrefixMinus],"<|>",[try_,[lex.lexeme,"$",char_("+"),">>",notFollowedBy,char_("+")],">>",return_,PrefixOp.PrefixPlus],"<|>",[lex.reserved,"typeof",">>",return_,PrefixOp.PrefixTypeof],"<|>",[lex.reserved,"void",">>",return_,
PrefixOp.PrefixVoid],"<|>",[lex.reserved,"delete",">>",return_,PrefixOp.PrefixDelete])(function(a,b,c){var d=b.op,f;if(d.Nothing)f=unaryAssignExpr;if(d.Just)f=cs("innerExpr","<-",parsePrefixedExpr)(ret,function(g){return Expression.PrefixExpr(b.pos,d[0],g.innerExpr)});return f(a,b,c)}),exprTable=[[makeInfixExpr("*",InfixOp.OpMul),makeInfixExpr("/",InfixOp.OpDiv),makeInfixExpr("%",InfixOp.OpMod)],[makeInfixExpr("+",InfixOp.OpAdd),makeInfixExpr("-",InfixOp.OpSub)],[makeInfixExpr("<<",InfixOp.OpLShift),
makeInfixExpr(">>",InfixOp.OpSpRShift),makeInfixExpr(">>>",InfixOp.OpZfRShift)],[makeInfixExpr("<",InfixOp.OpLT),makeInfixExpr("<=",InfixOp.OpLEq),makeInfixExpr(">",InfixOp.OpGT),makeInfixExpr(">=",InfixOp.OpGEq),makeInfixExpr("instanceof",InfixOp.OpInstanceof),makeInfixExpr("in",InfixOp.OpIn)],[makeInfixExpr("&",InfixOp.OpBAnd)],[makeInfixExpr("^",InfixOp.OpBXor)],[makeInfixExpr("|",InfixOp.OpBOr)],[makeInfixExpr("&&",InfixOp.OpLAnd)],[makeInfixExpr("||",InfixOp.OpLOr)],[makeInfixExpr("==",InfixOp.OpEq),
makeInfixExpr("!=",InfixOp.OpNEq),makeInfixExpr("===",InfixOp.OpStrictEq),makeInfixExpr("!==",InfixOp.OpStrictNEq)]].reverse(),parseExpression_=label(buildExpressionParser(exprTable,parsePrefixedExpr),"simple expression");function asLValue(a,b){if(b.VarRef)if(b[1].Id)return return_(LValue.LVar(b[0],b[1][1]));if(b.DotRef)if(b[2].Id)return return_(LValue.LDot(b[0],b[1],b[2][1]));if(b.BracketRef)return return_(LValue.LBracket(b[0],b[1],b[2]));return fail("expeceted l-value at "+a)}
var lvalue=cs("p","<-",getPosition)("e","<-",parseSimpleExpr,Maybe.Nothing)(function(a,b,c){return asLValue(b.p,b.e)(a,b,c)});function hook(a,b){return function(c,d,f){return a(d[b])(c,d,f)}}function hookIdent(a,b){return function(c,d,f){return d[a](d[b])(c,d,f)}}
var unaryAssignExpr=cs("p","<-",getPosition)("prefixInc","<-",ret,function(a){return cs(lex.reservedOp("++"))(liftM,[Expression.UnaryAssignExpr,a.p,UnaryAssignOp.PrefixInc],lvalue)})("prefixDec","<-",ret,function(a){return cs(lex.reservedOp("--"))(liftM,[Expression.UnaryAssignExpr,a.p,UnaryAssignOp.PrefixDec],lvalue)})("postfixInc","<-",ret,function(a){return function(b){return cs(lex.reservedOp("++"))(liftM,[Expression.UnaryAssignExpr,a.p,UnaryAssignOp.PostfixInc],[asLValue,a.p,b])}})("postfixDec",
"<-",ret,function(a){return function(b){return cs(lex.reservedOp("--"))(liftM,[Expression.UnaryAssignExpr,a.p,UnaryAssignOp.PostfixDec],[asLValue,a.p,b])}})("other","<-",ret,function(){return cs("e","<-",parseSimpleExpr,Maybe.Nothing)(hookIdent,"postfixInc","e","<|>",hookIdent,"postfixDec","e","<|>",ret,"e")})(hook,id,"prefixInc","<|>",hook,id,"prefixDec","<|>",hook,id,"other"),parseTernaryExpr_=cs(lex.reservedOp("?"))("l","<-",assignExpr)(lex.colon)("r","<-",assignExpr)(ret,function(a){return[a.l,
a.r]}),parseTernaryExpr=cs("e","<-",parseExpression_)("e_","<-",optionMaybe,parseTernaryExpr_)(function(a,b){a=b.e_;e=b.e;if(a.Nothing)return return_(b.e);if(a.Just){var c=a[0],d=a[1];return cs("p","<-",getPosition)(ret,function(f){return Expression.CondExpr(f.p,e,c,d)})}}),assignOp=[[lex.reservedOp,str("="),">>",return_,AssignOp.OpAssign],"<|>",[lex.reservedOp,str("+="),">>",return_,AssignOp.OpAssignAdd],"<|>",[lex.reservedOp,str("-="),">>",return_,AssignOp.OpAssignSub],"<|>",[lex.reservedOp,str("*="),
">>",return_,AssignOp.OpAssignMul],"<|>",[lex.reservedOp,str("/="),">>",return_,AssignOp.OpAssignDiv],"<|>",[lex.reservedOp,str("%="),">>",return_,AssignOp.OpAssignMod],"<|>",[lex.reservedOp,str("<<="),">>",return_,AssignOp.OpAssignLShift],"<|>",[lex.reservedOp,str(">>="),">>",return_,AssignOp.OpAssignSpRShift],"<|>",[lex.reservedOp,str(">>>="),">>",return_,AssignOp.OpAssignZfRShift],"<|>",[lex.reservedOp,str("&="),">>",return_,AssignOp.OpAssignBAnd],"<|>",[lex.reservedOp,str("^="),">>",return_,AssignOp.OpAssignBXor],
"<|>",[lex.reservedOp,str("|="),">>",return_,AssignOp.OpAssignBOr]].resolve(),assignExpr=cs("p","<-",getPosition)("lhs","<-",parseTernaryExpr)(cs("op","<-",assignOp)("lhs","<-",function(a,b,c){return asLValue(b.scope.p,b.scope.lhs)(a,b,c)})("rhs","<-",assignExpr)(ret,function(a){return Expression.AssignExpr(a.scope.p,a.op,a.lhs,a.rhs)}),"<|>",ret,"lhs"),parseExpression=assignExpr,parseListExpr=ex(liftM2,Expression.ListExpr,getPosition,[assignExpr,op(sepBy),lex.comma]),parseScript=cs(lex.whiteSpace)(liftM2,
JavaScript.Script,getPosition,[parseStatement,op(sepBy),lex.whiteSpace]),emptyParsedJavaScript=JavaScript.Script(error("Parser.emptyParsedJavaScript--no annotation"),[]);

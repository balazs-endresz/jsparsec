/*

 JavaScript analysis tools for JSParsec

 Version: 0.0.2

 http://code.google.com/p/jsparsec/

 Copyright (c) 2010 Balazs Endresz (balazs.endresz@gmail.com)
 Dual licensed under the MIT and GPL licenses.

 This is a port of the WebBits library (BrownPLT.JavaScript.*):
 http://hackage.haskell.org/package/WebBits-2.0
 Copyright (c) 2007-2009 Arjun Guha, Claudiu Saftoiu, and Spiridon Eliopoulos

*/
var curry=JSParsec.curry,const_=JSParsec.const_,isArray=JSParsec.isArray,isDefined=JSParsec.isDefined,slice=JSParsec.slice,foldl=JSParsec.foldl,foldr=JSParsec.foldr,map=JSParsec.map,filter=JSParsec.filter,indexOf=JSParsec.indexOf,lastIndexOf=JSParsec.lastIndexOf,zip=JSParsec.zip,sort=JSParsec.sort,nub=JSParsec.nub,maybe=JSParsec.maybe,compare=JSParsec.compare,compose=JSParsec.compose,compose1=JSParsec.compose1,call=JSParsec.call,id=JSParsec.id,flip=JSParsec.flip,cons=JSParsec.cons,consJoin=JSParsec.consJoin,
replicate=JSParsec.replicate,negate=JSParsec.negate,null_=JSParsec.null_,elem=JSParsec.elem,isSpace=JSParsec.isSpace,isUpper=JSParsec.isUpper,isLower=JSParsec.isLower,isAlpha=JSParsec.isAlpha,isAlphaNum=JSParsec.isAlphaNum,isDigit=JSParsec.isDigit,isHexDigit=JSParsec.isHexDigit,isOctDigit=JSParsec.isOctDigit,digitToInt=JSParsec.digitToInt,range=JSParsec.range,extend=JSParsec.extend,namespace=JSParsec.namespace,toInteger=JSParsec.toInteger,fromInteger=JSParsec.fromInteger,fromIntegral=JSParsec.fromIntegral,
fst=JSParsec.fst,snd=JSParsec.snd,uncurry=JSParsec.uncurry,lookup=JSParsec.lookup,readHex=JSParsec.readHex,readOct=JSParsec.readOct,chr=JSParsec.chr,round=JSParsec.round,data=JSParsec.data,ADT=JSParsec.ADT,record=JSParsec.record,Maybe=JSParsec.Maybe,Ordering=JSParsec.Ordering,Either=JSParsec.Either,operators=JSParsec.operators,infix=JSParsec.infix,infixl=JSParsec.infixl,infixr=JSParsec.infixr,arr=JSParsec.arr,op=JSParsec.op,str=JSParsec.str,ex=JSParsec.ex,resolve=JSParsec.resolve,recurse=JSParsec.recurse,
Recurse=JSParsec.Recurse,cs=JSParsec.cs,sequence=JSParsec.sequence,run=JSParsec.run,Parser=JSParsec.Parser,ParseState=JSParsec.ParseState,ps=JSParsec.ps,toParser=JSParsec.toParser,unexpected=JSParsec.unexpected,parsecMap=JSParsec.parsecMap,fmap=JSParsec.fmap,liftM=JSParsec.liftM,liftM2=JSParsec.liftM2,liftM3=JSParsec.liftM3,liftA=JSParsec.liftA,liftA2=JSParsec.liftA2,liftA3=JSParsec.liftA3,ap=JSParsec.ap,parserBind=JSParsec.parserBind,parserReturn=JSParsec.parserReturn,return_=JSParsec.return_,pure=
JSParsec.pure,parserFail=JSParsec.parserFail,fail=JSParsec.fail,parserZero=JSParsec.parserZero,mzero=JSParsec.mzero,empty=JSParsec.empty,parserPlus=JSParsec.parserPlus,parserPlusN=JSParsec.parserPlusN,mplus=JSParsec.mplus,do_=JSParsec.do_,do2=JSParsec.do2,bind=JSParsec.bind,ret=JSParsec.ret,withBound=JSParsec.withBound,returnCall=JSParsec.returnCall,lazy=JSParsec.lazy,getPosition=JSParsec.getPosition,setPosition=JSParsec.setPosition,getParserState=JSParsec.getParserState,setParserState=JSParsec.setParserState,
tokens=JSParsec.tokens,many=JSParsec.many,many1=JSParsec.many1,string=JSParsec.string,char_=JSParsec.char_,satisfy=JSParsec.satisfy,label=JSParsec.label,try_=JSParsec.try_,skipMany=JSParsec.skipMany,match=JSParsec.match,oneOf=JSParsec.oneOf,noneOf=JSParsec.noneOf,space=JSParsec.space,spaces=JSParsec.spaces,newline=JSParsec.newline,tab=JSParsec.tab,upper=JSParsec.upper,lower=JSParsec.lower,alphaNum=JSParsec.alphaNum,letter=JSParsec.letter,digit=JSParsec.digit,hexDigit=JSParsec.hexDigit,octDigit=JSParsec.octDigit,
anyChar=JSParsec.anyChar,choice=JSParsec.choice,count=JSParsec.count,between=JSParsec.between,option=JSParsec.option,optionMaybe=JSParsec.optionMaybe,optional=JSParsec.optional,skipMany1=JSParsec.skipMany1,sepBy=JSParsec.sepBy,sepBy1=JSParsec.sepBy1,endBy=JSParsec.endBy,endBy1=JSParsec.endBy1,sepEndBy=JSParsec.sepEndBy,sepEndBy1=JSParsec.sepEndBy1,chainl=JSParsec.chainl,chainl1=JSParsec.chainl1,chainr=JSParsec.chainr,chainr1=JSParsec.chainr1,eof=JSParsec.eof,notFollowedBy=JSParsec.notFollowedBy,manyTill=
JSParsec.manyTill,lookAhead=JSParsec.lookAhead,anyToken=JSParsec.anyToken,GenLanguageDef=JSParsec.GenLanguageDef,GenTokenParser=JSParsec.GenTokenParser,makeTokenParser=JSParsec.makeTokenParser,emptyDef=JSParsec.emptyDef,haskellStyle=JSParsec.haskellStyle,javaStyle=JSParsec.javaStyle,haskellDef=JSParsec.haskellDef,mondrianDef=JSParsec.mondrianDef,getHaskell=JSParsec.getHaskell,getMondrian=JSParsec.getMondrian,Assoc=JSParsec.Assoc,Operator=JSParsec.Operator,buildExpressionParser=JSParsec.buildExpressionParser;
function Statement(){}function JavaScript(){}data(JavaScript,[["Script","a",Array]]);function Id(){}data(Id,[["Id","a",String]]);function unId(a){if(!(a instanceof Id))throw"Type error: expecting type of 'Id' instead of "+a.constructor;return a.Id?a[1]:null}function InfixOp(){}data(InfixOp,["OpLT","OpLEq","OpGT","OpGEq","OpIn","OpInstanceof","OpEq","OpNEq","OpStrictEq","OpStrictNEq","OpLAnd","OpLOr","OpMul","OpDiv","OpMod","OpSub","OpLShift","OpSpRShift","OpZfRShift","OpBAnd","OpBXor","OpBOr","OpAdd"]);
function AssignOp(){}data(AssignOp,["OpAssign","OpAssignAdd","OpAssignSub","OpAssignMul","OpAssignDiv","OpAssignMod","OpAssignLShift","OpAssignSpRShift","OpAssignZfRShift","OpAssignBAnd","OpAssignBXor","OpAssignBOr"]);function UnaryAssignOp(){}data(UnaryAssignOp,["PrefixInc","PrefixDec","PostfixInc","PostfixDec"]);function PrefixOp(){}data(PrefixOp,["PrefixLNot","PrefixBNot","PrefixPlus","PrefixMinus","PrefixTypeof","PrefixVoid","PrefixDelete"]);function Prop(){}
data(Prop,[["PropId","a",Id],["PropString","a",String],["PropNum","a",Number]]);function LValue(){}function Expression(){}data(LValue,[["LVar","a",String],["LDot","a",Expression,String],["LBracket","a",Expression,Expression]]);
data(Expression,[["StringLit","a",String],["RegexpLit","a",String,Boolean,Boolean],["NumLit","a",Number],["IntLit","a",Number],["BoolLit","a",Boolean],["NullLit","a"],["ArrayLit","a",Array],["ObjectLit","a",Array],["ThisRef","a"],["VarRef","a",Id],["DotRef","a",Expression,Id],["BracketRef","a",Expression,Expression],["NewExpr","a",Expression,Array],["PrefixExpr","a",PrefixOp,Expression],["UnaryAssignExpr","a",UnaryAssignOp,LValue],["InfixExpr","a",InfixOp,Expression,Expression],["CondExpr","a",Expression,
Expression,Expression],["AssignExpr","a",AssignOp,LValue,Expression],["ParenExpr","a",Expression],["ListExpr","a",Array],["CallExpr","a",Expression,Array],["FuncExpr","a",Maybe,Array,Statement]]);function CaseClause(){}data(CaseClause,[["CaseClause","a",Expression,Array],["CaseDefault","a",Array]]);function CatchClause(){}data(CatchClause,[["CatchClause","a",Id,Statement]]);function VarDecl(){}data(VarDecl,[["VarDecl","a",Id,Maybe]]);function ForInit(){}
data(ForInit,["NoInit",["VarInit",Array],["ExprInit",Expression]]);function ForInInit(){}data(ForInInit,[["ForInVar",Id],["ForInNoVar",Id]]);
data(Statement,[,["BlockStmt","a",Array],["EmptyStmt","a"],["ExprStmt","a",Expression],["IfStmt","a",Expression,Statement,Statement],["IfSingleStmt","a",Expression,Statement],["SwitchStmt","a",Expression,Array],["WhileStmt","a",Expression,Statement],["DoWhileStmt","a",Statement,Expression],["BreakStmt","a",Maybe],["ContinueStmt","a",Maybe],["LabelledStmt","a",Id,Statement],["ForInStmt","a",ForInInit,Expression,Statement],["ForStmt","a",ForInit,Maybe,Maybe,Statement],["TryStmt","a",Statement,Array,
Maybe],["ThrowStmt","a",Expression],["ReturnStmt","a",Maybe],["WithStmt","a",Expression,Statement],["VarDeclStmt","a",Array],["FunctionStmt","a",Id,Array,Statement]]);
var identifierStart=[letter,"<|>",oneOf,"$_"].resolve(),javascriptDef=GenLanguageDef.LanguageDef(record,{commentStart:"/*",commentEnd:"*/",commentLine:"//",nestedComments:false,identStart:identifierStart,identLetter:[alphaNum,"<|>",oneOf,"$_"].resolve(),opStart:oneOf("{}<>()~.,?:|&^=!+-*/%!"),opLetter:oneOf("=<>|&+"),reservedOpNames:["|=","^=","&=","<<=",">>=",">>>=","+=","-=","*=","/=","%=","=",";",",","?",":","||","&&","|","^","&","===","==","=","!==","!=","<<","<=","<",">>>",">>",">=",">","++",
"--","+","-","*","/","%","!","~",".","[","]","{","}","(",")","instanceof","in"],reservedNames:["break","case","catch","const","continue","debugger","default","delete","do","else","enum","false","finally","for","function","if","instanceof","in","let","new","null","return","switch","this","throw","true","try","typeof","var","void","while","with"],caseSensitive:true}),lex=makeTokenParser(javascriptDef),parseListExpr=lazy(function(){return parseListExpr}),parseStatement=lazy(function(){return parseStatement}),
parseParenExpr=lazy(function(){return parseParenExpr}),parseNewExpr=lazy(function(){return parseNewExpr}),parseExpression=lazy(function(){return parseExpression}),assignExpr=parseExpression;function toUnicodeString(a){return chr(readHex(a))}function toAsciiString(a,b){return chr(readHex(""+a+b))}function onSameLine(a,b,c){return function(d,e,f){return(d.sourceLine(e[a])==d.sourceLine(e[b])?parserPlus(liftM(Maybe.Just,c),return_(Maybe.Nothing)):return_(Maybe.Nothing))(d,e,f)}}
function onSameLine1(a,b,c){return function(d,e,f){return(d.sourceLine(e[a])==d.sourceLine(e[b])?c:unexpected("end of line"))(d,e,f)}}function autoEndStmt(a,b,c){var d=a.input.substring(0,a.index-a.dropped).match(/\s*$/);d=d&&/\n|\r/.test(d[0]);var e;if(!d){var f=a.at(0);if(f==""||f=="}")d=true;else if(f==";")e=d=true}return(d?e?lex.semi:return_(null):fail("end of statement"))(a,b,c)}
var identifier=liftM2(Id.Id,getPosition,lex.identifier),parseIfStmt=cs("pos","<-",getPosition)(lex.reserved,"if")("test","<-",parseParenExpr,"<?>","parenthesized test-expression in if statement")("consequent","<-",parseStatement,"<?>","true-branch of if statement")(cs(lex.reserved,"else")("alternate","<-",parseStatement)(ret,function(a){return Statement.IfStmt(a.scope.pos,a.scope.test,a.scope.consequent,a.alternate)}),"<|>",returnCall(Statement.IfSingleStmt,"pos","test","consequent")),_parseDefault=
cs("pos","<-",getPosition)(lex.reserved,"default")(lex.colon)("statements","<-",many,parseStatement)(returnCall,CaseClause.CaseDefault,"pos","statements"),_parseCase=cs("pos","<-",getPosition)(lex.reserved,"case")("condition","<-",parseListExpr)(lex.colon)("actions","<-",many,parseStatement)(returnCall,CaseClause.CaseClause,"pos","condition","actions"),parseSwitchStmt=cs("pos","<-",getPosition)(lex.reserved,"switch")("test","<-",parseParenExpr)("clauses","<-",lex.braces,"$",many,"$",_parseDefault,
"<|>",_parseCase)(returnCall,Statement.SwitchStmt,"pos","test","clauses"),parseWhileStmt=cs("pos","<-",getPosition)(lex.reserved,"while")("test","<-",parseParenExpr,"<?>","parenthesized test-expression in while loop")("body","<-",parseStatement)(returnCall,Statement.WhileStmt,"pos","test","body"),parseBlockStmt=cs("pos","<-",getPosition)("statements","<-",lex.braces,[many,parseStatement])(returnCall,Statement.BlockStmt,"pos","statements"),parseDoWhileStmt=cs("pos","<-",getPosition)(lex.reserved,"do")("body",
"<-",parseBlockStmt)(lex.reserved,"while","<?>","while at the end of a do block")("test","<-",parseParenExpr,"<?>","parenthesized test-expression in do loop")(autoEndStmt)(returnCall,Statement.DoWhileStmt,"pos","body","test"),parseContinueStmt=cs("pos","<-",getPosition)(lex.reserved,"continue")("pos_","<-",getPosition)("id","<-",onSameLine,"pos","pos_",identifier)(autoEndStmt)(returnCall,Statement.ContinueStmt,"pos","id"),parseBreakStmt=cs("pos","<-",getPosition)(lex.reserved,"break")("pos_","<-",
getPosition)("id","<-",onSameLine,"pos","pos_",identifier)(autoEndStmt)(returnCall,Statement.BreakStmt,"pos","id"),parseEmptyStmt=cs("pos","<-",getPosition)(lex.semi)(returnCall,Statement.EmptyStmt,"pos"),parseLabelledStmt=cs("pos","<-",getPosition)("label","<-",try_,cs("label","<-",identifier)(lex.colon)(ret,"label"))("statement","<-",parseStatement)(returnCall,Statement.LabelledStmt,"pos","label","statement"),parseExpressionStmt=cs("pos","<-",getPosition)("expr","<-",parseListExpr)(autoEndStmt)(returnCall,
Statement.ExprStmt,"pos","expr"),_parseInit=ex([lex.reserved,"var",">>",liftM,ForInInit.ForInVar,identifier],"<|>",[liftM,ForInInit.ForInNoVar,identifier]),parseForInStmt=cs("pos","<-",getPosition)("init_expr","<-",try_,cs(lex.reserved,"for")(lex.parens,cs("init","<-",_parseInit)(lex.reserved,"in")("expr","<-",parseExpression)(ret,function(a){return[a.init,a.expr]})))("body","<-",parseStatement)(ret,function(a){return Statement.ForInStmt(a.pos,a.init_expr[0],a.init_expr[1],a.body)}),parseVarDecl=
cs("pos","<-",getPosition)("id","<-",identifier)("init","<-",[lex.reservedOp("="),">>",liftM,Maybe.Just,parseExpression],"<|>",return_(Maybe.Nothing))(returnCall,VarDecl.VarDecl,"pos","id","init"),parseVarDeclStmt=cs("pos","<-",getPosition)(lex.reserved,"var")("decls","<-",parseVarDecl,op(sepBy),lex.comma)(autoEndStmt)(returnCall,Statement.VarDeclStmt,"pos","decls"),_parseInit2=ex([lex.reserved,"var",">>",liftM,ForInit.VarInit,[parseVarDecl,op(sepBy),lex.comma]],"<|>",[liftM,ForInit.ExprInit,parseListExpr],
"<|>",return_(ForInit.NoInit)),parseForStmt=cs("pos","<-",getPosition)(lex.reserved,"for")(lex.reservedOp("("))("init","<-",_parseInit2)(lex.semi)("test","<-",[liftM,Maybe.Just,parseExpression],"<|>",return_(Maybe.Nothing))(lex.semi)("iter","<-",[liftM,Maybe.Just,parseListExpr],"<|>",return_(Maybe.Nothing))(lex.reservedOp(")"),"<?>","closing paren")("stmt","<-",parseStatement)(returnCall,Statement.ForStmt,"pos","init","test","iter","stmt"),_parseCatchClause=cs("pos","<-",getPosition)(lex.reserved,
"catch")("id","<-",lex.parens,identifier)("stmt","<-",parseStatement)(returnCall,CatchClause.CatchClause,"pos","id","stmt"),parseTryStmt=cs(lex.reserved,"try")("pos","<-",getPosition)("guarded","<-",parseStatement)("catches","<-",many,_parseCatchClause)("finally","<-",[lex.reserved,"finally",">>",liftM,Maybe.Just,parseStatement],"<|>",return_(Maybe.Nothing))(returnCall,Statement.TryStmt,"pos","guarded","catches","finally"),parseThrowStmt=cs("pos","<-",getPosition)(lex.reserved,"throw")("pos_","<-",
getPosition)("expr","<-",onSameLine1,"pos","pos_",parseExpression)(autoEndStmt)(returnCall,Statement.ThrowStmt,"pos","expr"),parseReturnStmt=cs("pos","<-",getPosition)(lex.reserved,"return")("pos_","<-",getPosition)("expr","<-",onSameLine,"pos","pos_",parseListExpr)(autoEndStmt)(returnCall,Statement.ReturnStmt,"pos","expr"),parseWithStmt=cs("pos","<-",getPosition)(lex.reserved,"with")("context","<-",parseParenExpr)("stmt","<-",parseStatement)(returnCall,Statement.WithStmt,"pos","context","stmt"),
parseFunctionStmt=cs("pos","<-",getPosition)("name","<-",try_,[lex.reserved,"function",">>",identifier])("args","<-",lex.parens,[identifier,op(sepBy),lex.comma])("body","<-",parseBlockStmt,"<?>","function body in { ... }")(returnCall,Statement.FunctionStmt,"pos","name","args","body");
parseStatement=ex(parseIfStmt,"<|>",parseSwitchStmt,"<|>",parseWhileStmt,"<|>",parseDoWhileStmt,"<|>",parseContinueStmt,"<|>",parseBreakStmt,"<|>",parseBlockStmt,"<|>",parseEmptyStmt,"<|>",parseForInStmt,"<|>",parseForStmt,"<|>",parseTryStmt,"<|>",parseThrowStmt,"<|>",parseReturnStmt,"<|>",parseWithStmt,"<|>",parseVarDeclStmt,"<|>",parseFunctionStmt,"<|>",parseLabelledStmt,"<|>",parseExpressionStmt,"<?>","statement");
var parseThisRef=cs("pos","<-",getPosition)(lex.reserved,"this")(returnCall,Expression.ThisRef,"pos"),parseNullLit=cs("pos","<-",getPosition)(lex.reserved,"null")(returnCall,Expression.NullLit,"pos"),parseBoolLit=cs("pos","<-",getPosition)("true","<-",return_,true)("false","<-",return_,false)([lex.reserved,"true",">>",returnCall(Expression.BoolLit,"pos","true")],"<|>",[lex.reserved,"false",">>",returnCall(Expression.BoolLit,"pos","false")]),parseVarRef=liftM2(Expression.VarRef,getPosition,identifier),
parseArrayLit=liftM2(Expression.ArrayLit,getPosition,lex.squares(sepEndBy(parseExpression,lex.comma))),parseFuncExpr=cs("pos","<-",getPosition)(lex.reserved,"function")("name","<-",[identifier,">>=",return_,".",Maybe.Just],"<|>",return_,Maybe.Nothing)("args","<-",lex.parens,[identifier,op(sepBy),lex.comma])("body","<-",parseBlockStmt)(returnCall,Expression.FuncExpr,"pos","name","args","body"),escapeChars=[["'","'"],['"','"'],["\\","\\"],["b","\u0008"],["f","\u000c"],["n","\n"],["r","\r"],["t","\t"],
["v","\u000b"],["/","/"],[" "," "],["0","\u0000"]],allEscapes=map(fst,escapeChars),parseEscapeChar=cs("c","<-",oneOf(allEscapes))(ret,function(a){return lookup(a.c,escapeChars)[0]}),parseAsciiHexChar=cs(char_,"x")("d1","<-",hexDigit)("d2","<-",hexDigit)(returnCall,toAsciiString,"d1","d2"),parseUnicodeHexChar=cs(char_("u"))(liftM,toUnicodeString,sequence([hexDigit,hexDigit,hexDigit,hexDigit]));function isWhitespace(a){return a==" "||a=="\t"}
function lazyParseStringLit_(a){return function(b,c,d){return parseStringLit_(a)(b,c,d)}}
function parseStringLit_(a){return ex([char_(a),">>",return_,""],"<|>",[cs(try_,[string,"\\'"])("cs","<-",lazyParseStringLit_(a))(ret,function(b){return"'"+b.cs})],"<|>",[cs(char_("\\"))("c","<-",parseEscapeChar,"<|>",parseAsciiHexChar,"<|>",parseUnicodeHexChar,"<|>",char_("\r"),"<|>",char_("\n"))("cs","<-",lazyParseStringLit_(a))(ret,function(b){return b.c=="\r"||b.c=="\n"?cons(b.c,dropWhile(isWhitespace,b.cs)):cons(b.c,b.cs)})],"<|>",[liftM2,cons,anyChar,lazyParseStringLit_(a)])}
var parseStringLit=cs("pos","<-",getPosition)("str","<-",lex.lexeme,"$",[char_("'"),">>=",parseStringLit_],"<|>",[char_('"'),">>=",parseStringLit_])(returnCall,Expression.StringLit,"pos","str"),parseFlags=cs("flags","<-",many,oneOf("mgi"))(ret,function(a){return function(b){return b(elem("g",a.flags),elem("i",a.flags))}}),parseEscape=ex(char_("\\"),">>",anyChar).resolve(),parseChar=noneOf("/"),_parseRe=function(a,b,c){return parseRe(a,b,c)},parseRe=ex([char_("/"),">>",return_,""],"<|>",cs(char_("\\"))("ch",
"<-",anyChar)("rest","<-",_parseRe)(ret,function(a){return"\\"+a.ch+a.rest}),"<|>",[liftM2,cons,anyChar,_parseRe]),parseRegexpLit=cs("pos","<-",getPosition)(char_("/"))("pat","<-",parseRe)("flags","<-",parseFlags)(spaces)(ret,function(a){return a.flags(function(b,c){return Expression.RegexpLit(a.pos,a.pat,b,c)})}),_parseProp=cs("name","<-",[liftM,uncurry(Prop.PropString),[liftM,function(a){return[a[0],a[1]]},parseStringLit]],"<|>",[liftM2,Prop.PropId,getPosition,identifier],"<|>",[liftM2,Prop.PropNum,
getPosition,lex.decimal])(lex.colon)("val","<-",assignExpr)(ret,function(a){return[a.name,a.val]}),parseObjectLit=cs("pos","<-",getPosition)("props","<-",lex.braces,[_parseProp,op(sepEndBy),lex.comma],"<?>","object literal")(returnCall,Expression.ObjectLit,"pos","props"),hexLit=cs(try_,string("0x"))("digits","<-",many1,oneOf("0123456789abcdefABCDEF"))("hex","<-",returnCall,readHex,"digits")(ret,function(a){return[true,a.hex]}),octLit=cs("digits","<-",try_,"$",[char_("0"),">>",[many1,oneOf("01234567"),
"<|>",return_("0")]],"<*",notFollowedBy,oneOf("89"))("oct","<-",returnCall,readOct,"digits")(ret,function(a){return[true,a.oct]});function mkDecimal(a,b,c){return b>=1?mkDecimal(a,b/10,c):(a+b)*Math.pow(10,c)}var exponentPart=cs(oneOf,"eE")([char_("+"),">>",lex.decimal],"<|>",[char_("-"),">>",negate,op(fmap),lex.decimal],"<|>",lex.decimal);function jparser(a){return ex(a,">>=",[return_,".",Maybe.Just])}
var decLit=ex(cs("whole","<-",lex.decimal)("mfrac","<-",option,Maybe.Nothing,[jparser,[char_("."),">>",lex.decimal]])("mexp","<-",option,Maybe.Nothing,[jparser,exponentPart])(ret,function(a){return a.mfrac==Maybe.Nothing&&a.mexp==Maybe.Nothing?[true,a.whole]:[false,mkDecimal(a.whole,maybe(0,id,a.mfrac),maybe(0,id,a.mexp))]}),"<|>",cs("frac","<-",char_("."),">>",lex.decimal)("exp","<-",option,0,exponentPart)(ret,function(a){return[false,mkDecimal(0,a.frac,a.exp)]})),parseNumLit=cs("pos","<-",getPosition)("isint_num",
"<-",lex.lexeme,"$",hexLit,"<|>",octLit,"<|>",decLit)(notFollowedBy,identifierStart,"<?>","whitespace")(ret,function(a){var b=a.isint_num[1];return a.isint_num[0]?Expression.IntLit(a.pos,round(b)):Expression.NumLit(a.pos,b)});function withPos(a,b){return do_(bind("pos",getPosition),bind("e",b),ret(function(c){return a(c.pos,c.e)}))}function dotRef(a){function b(c,d){return Expression.DotRef(c,a,d)}return ex([lex.reservedOp("."),">>",withPos,b,identifier],"<?>","property.ref")}
function funcApp(a){function b(c,d){return Expression.CallExpr(c,a,d)}return ex([lex.parens,"$",withPos,b,[parseExpression,op(sepBy),lex.comma]],"<?>","(function application)")}function bracketRef(a){function b(c,d){return Expression.BracketRef(c,a,d)}return ex([lex.brackets,"$",withPos,b,parseExpression],"<?>","[property-ref]")}parseParenExpr=withPos(Expression.ParenExpr,lex.parens(parseListExpr));
var parseExprForNew=ex(parseThisRef,"<|>",parseNullLit,"<|>",parseBoolLit,"<|>",parseStringLit,"<|>",parseArrayLit,"<|>",parseParenExpr,"<|>",parseNewExpr,"<|>",parseNumLit,"<|>",parseRegexpLit,"<|>",parseObjectLit,"<|>",parseVarRef),parseSimpleExpr_=ex(parseThisRef,"<|>",parseNullLit,"<|>",parseBoolLit,"<|>",parseStringLit,"<|>",parseArrayLit,"<|>",parseParenExpr,"<|>",parseFuncExpr,"<|>",parseNumLit,"<|>",parseRegexpLit,"<|>",parseObjectLit,"<|>",parseVarRef);
function parseSimpleExprForNew(a){if(a.Just){a=a[0];return ex(cs("e_","<-",dotRef(a),"<|>",bracketRef(a))(function(b,c,d){return parseSimpleExprForNew(Maybe.Just(c.e_))(b,c,d)}),"<|>",return_(a))}if(a.Nothing)return cs("e","<-",parseNewExpr,"<?>","expression (3)")(function(b,c,d){return parseSimpleExprForNew(Maybe.Just(c.e))(b,c,d)})}
parseNewExpr=ex(cs("pos","<-",getPosition)(lex.reserved,"new")("constructor_","<-",parseSimpleExprForNew,Maybe.Nothing)("arguments","<-",[try_,[lex.parens,[parseExpression,op(sepBy),lex.comma]]],"<|>",return_([]))(returnCall,Expression.NewExpr,"pos","constructor_","arguments"),"<|>",parseSimpleExpr_);
function parseSimpleExpr(a){if(a.Just){a=a[0];return ex(cs("e_","<-",dotRef(a),"<|>",funcApp(a),"<|>",bracketRef(a))(function(b,c,d){return parseSimpleExpr(Maybe.Just(c.e_))(b,c,d)}),"<|>",return_(a))}if(a.Nothing)return cs("e","<-",parseNewExpr,"<?>","expression (3)")(function(b,c,d){return parseSimpleExpr(Maybe.Just(c.e))(b,c,d)})}
function makeInfixExpr(a,b){a=cs("pos","<-",getPosition)(lex.reservedOp(a))(ret,function(c){return function(d,e){return Expression.InfixExpr(c.pos,b,d,e)}});return Operator.Infix(a,Assoc.AssocLeft)}
var parsePrefixedExpr=cs("pos","<-",getPosition)("op","<-",optionMaybe,"$",[lex.reservedOp("!"),">>",return_,PrefixOp.PrefixLNot],"<|>",[lex.reservedOp("~"),">>",return_,PrefixOp.PrefixBNot],"<|>",[try_,[lex.lexeme,"$",char_("-"),">>",notFollowedBy,char_("-")],">>",return_,PrefixOp.PrefixMinus],"<|>",[try_,[lex.lexeme,"$",char_("+"),">>",notFollowedBy,char_("+")],">>",return_,PrefixOp.PrefixPlus],"<|>",[lex.reserved,"typeof",">>",return_,PrefixOp.PrefixTypeof],"<|>",[lex.reserved,"void",">>",return_,
PrefixOp.PrefixVoid],"<|>",[lex.reserved,"delete",">>",return_,PrefixOp.PrefixDelete])(function(a,b,c){var d=b.op,e;if(d.Nothing)e=unaryAssignExpr;if(d.Just)e=cs("innerExpr","<-",parsePrefixedExpr)(ret,function(f){return Expression.PrefixExpr(b.pos,d[0],f.innerExpr)});return e(a,b,c)}),exprTable=[[makeInfixExpr("*",InfixOp.OpMul),makeInfixExpr("/",InfixOp.OpDiv),makeInfixExpr("%",InfixOp.OpMod)],[makeInfixExpr("+",InfixOp.OpAdd),makeInfixExpr("-",InfixOp.OpSub)],[makeInfixExpr("<<",InfixOp.OpLShift),
makeInfixExpr(">>",InfixOp.OpSpRShift),makeInfixExpr(">>>",InfixOp.OpZfRShift)],[makeInfixExpr("<",InfixOp.OpLT),makeInfixExpr("<=",InfixOp.OpLEq),makeInfixExpr(">",InfixOp.OpGT),makeInfixExpr(">=",InfixOp.OpGEq),makeInfixExpr("instanceof",InfixOp.OpInstanceof),makeInfixExpr("in",InfixOp.OpIn)],[makeInfixExpr("&",InfixOp.OpBAnd)],[makeInfixExpr("^",InfixOp.OpBXor)],[makeInfixExpr("|",InfixOp.OpBOr)],[makeInfixExpr("&&",InfixOp.OpLAnd)],[makeInfixExpr("||",InfixOp.OpLOr)],[makeInfixExpr("==",InfixOp.OpEq),
makeInfixExpr("!=",InfixOp.OpNEq),makeInfixExpr("===",InfixOp.OpStrictEq),makeInfixExpr("!==",InfixOp.OpStrictNEq)]].reverse(),parseExpression_=label(buildExpressionParser(exprTable,parsePrefixedExpr),"simple expression");function asLValue(a,b){if(b.VarRef)if(b[1].Id)return return_(LValue.LVar(b[0],b[1][1]));if(b.DotRef)if(b[2].Id)return return_(LValue.LDot(b[0],b[1],b[2][1]));if(b.BracketRef)return return_(LValue.LBracket(b[0],b[1],b[2]));return fail("expeceted l-value at "+a)}
var lvalue=cs("p","<-",getPosition)("e","<-",parseSimpleExpr,Maybe.Nothing)(function(a,b,c){return asLValue(b.p,b.e)(a,b,c)});function _createExpr(a,b){return function(c){return Expression.UnaryAssignExpr(a,UnaryAssignOp[b],c)}}function onSameLineExp(a,b){return function(c,d,e){var f=c.substring(0,2);if(f=="--"||f=="++"){f=c.input.substring(0,c.index-c.dropped).match(/\s*$/);return(f&&/\n|\r/.test(f[0])?b:a)(c,d,e)}else return b(c,d,e)}}
var unaryAssignExpr=parserBind(getPosition,function(a){function b(g){return do_(lex.reservedOp("++"),liftM(_createExpr(a,"PostfixInc"),asLValue(a,g)))}function c(g){return do_(lex.reservedOp("--"),liftM(_createExpr(a,"PostfixDec"),asLValue(a,g)))}var d=do_(lex.reservedOp("++"),liftM(_createExpr(a,"PrefixInc"),lvalue)),e=do_(lex.reservedOp("--"),liftM(_createExpr(a,"PrefixDec"),lvalue)),f=parserBind(parseSimpleExpr(Maybe.Nothing),function(g){return onSameLineExp(parserPlus(b(g),parserPlus(c(g),return_(g))),
return_(g))});return parserPlus(d,parserPlus(e,f))}),parseTernaryExpr_=cs(lex.reservedOp("?"))("l","<-",assignExpr)(lex.colon)("r","<-",assignExpr)(ret,function(a){return[a.l,a.r]}),parseTernaryExpr=cs("e","<-",parseExpression_)("e_","<-",optionMaybe,parseTernaryExpr_)(function(a,b,c){var d=b.e_,e=b.e,f;if(d.Nothing)f=return_(b.e);if(d.Just){var g=d[0][0],h=d[0][1];f=cs("p","<-",getPosition)(ret,function(i){return Expression.CondExpr(i.p,e,g,h)})}return f(a,b,c)}),assignOp=ex([lex.reservedOp("="),
">>",return_,AssignOp.OpAssign],"<|>",[lex.reservedOp("+="),">>",return_,AssignOp.OpAssignAdd],"<|>",[lex.reservedOp("-="),">>",return_,AssignOp.OpAssignSub],"<|>",[lex.reservedOp("*="),">>",return_,AssignOp.OpAssignMul],"<|>",[lex.reservedOp("/="),">>",return_,AssignOp.OpAssignDiv],"<|>",[lex.reservedOp("%="),">>",return_,AssignOp.OpAssignMod],"<|>",[lex.reservedOp("<<="),">>",return_,AssignOp.OpAssignLShift],"<|>",[lex.reservedOp(">>="),">>",return_,AssignOp.OpAssignSpRShift],"<|>",[lex.reservedOp(">>>="),
">>",return_,AssignOp.OpAssignZfRShift],"<|>",[lex.reservedOp("&="),">>",return_,AssignOp.OpAssignBAnd],"<|>",[lex.reservedOp("^="),">>",return_,AssignOp.OpAssignBXor],"<|>",[lex.reservedOp("|="),">>",return_,AssignOp.OpAssignBOr]);
parseExpression=assignExpr=cs("p","<-",getPosition)("lhs","<-",parseTernaryExpr)(cs("op","<-",assignOp)("lhs","<-",lazy,function(a){a.p=a.scope.p;return asLValue(a.scope.p,a.scope.lhs)})("rhs","<-",lazy,function(){return assignExpr})(returnCall,Expression.AssignExpr,"p","op","lhs","rhs"),"<|>",ret,"lhs");parseListExpr=liftM2(Expression.ListExpr,getPosition,sepBy1(assignExpr,lex.comma));var parseScript=cs(lex.whiteSpace)(liftM2,JavaScript.Script,getPosition,many(parseStatement));
JSParsec.JavaScript={parseScript:parseScript,parseExpression:parseExpression,parseSimpleExpr_:parseSimpleExpr_,parseBlockStmt:parseBlockStmt,parseStatement:parseStatement,assignExpr:assignExpr};
